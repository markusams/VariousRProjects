)
plot(density(resid(fit4)))
par(mfrow=c(1,1))
plot(density(resid(fit4)))
qqnorm(resid(fit4))
plot(fit4)
plot(fit4)
?anova
anova(fit1,fit2,fit3,fit4)$coeff
anova(fit1,fit2,fit3,fit4)$p
anova(fit1,fit2,fit3,fit4)
anova(fit1,fit2,fit3,fit4)$Pr
?boxplot
boxplot(mpg~am,data=mtcars)
boxplot(mpg~am,data=mtcars, col=am)
boxplot(mpg~am,data=mtcars, col=aes(am)
)
boxplot(mpg~am,data=mtcars,fill=am
)
boxplot(mpg~am,data=mtcars,fill=c(blue,green)
)
boxplot(mpg~am,data=mtcars,fill=c("blue","green"))
boxplot(mpg~am,data=mtcars,col=c("blue","green"))
boxplot(mpg~am,data=mtcars,col=c("cyan","orange"))
boxplot(mpg~am,data=mtcars,col=c("orange","cyan"))
boxplot(mpg~am,data=mtcars,col=c("orange","cyan"), xlab="Transmission",ylab="Miles per Gallon")
fit5 ~ lm(mpg~.,data=mtcars)
fit5 -> lm(mpg~.,data=mtcars)
fit5 <- lm(mpg~.,data=mtcars)
anova(fit1,fit2,fit3,fit4,fit5)
summary(fit4)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(AppliedPredictiveModeling)
download.packages(AppliedPredictiveModelin)
download.packages(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
install.packages("Caret")
install.packages("caret")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(training)
qplot(training$CompressiveStrength)
plot(training$CompressiveStrength)
plot(CompressiveStrength, colors = Cement, data=training)
plot(training$CompressiveStrength, colors = training$Cement)
plot(training$CompressiveStrength, color = training$Cement)
plot(training$CompressiveStrength, color = training$Cement)
library(ggplot2)
warnings()
geom_dotplot(training&CompressiveStrength)
geom_dotplot(training$CompressiveStrength)
plot(training$CompressiveStrength, color = training$Cement)
plot(training$CompressiveStrength, col = training$Cement)
warnings()
plot(training$CompressiveStrength, col=training$Cement)
plot(training$CompressiveStrength, col=as.integer(training$Cement)
)
plot(training$CompressiveStrength, col=as.integer(training$Cement))
g <- ggplot(training, aes(CompressiveStrengt))
g + geom_point()
g <- ggplot(training, aes(CompressiveStrength))
g <- ggplot(training, aes(CompressiveStrength))
g + geom_point()
g <- ggplot(training, aes(CompressiveStrength, row.names(training)))
g + geom_point()
g <- ggplot(training, aes(row.names(training), CompressiveStrength))
g + geom_point()
g + geom_point() + geom_color(Cement)
g <- ggplot(training, aes(row.names(training), CompressiveStrength), colour=Cement)
g + geom_point()
head(training)
g <- ggplot(training, aes(row.names(training), CompressiveStrength colours=Cement)
g <- ggplot(training, aes(row.names(training), CompressiveStrength, colours=Cement))
g + geom_point()
g + geom_point() + colScale
g + geom_point() + scale_colour_gradientn()
?scale_color_gradientn
g + geom_point() + scale_colour_gradient2()
g + geom_point() + scale_colour_gradient2()
library(Hmisc)
install.packages("Hmisc")
library("Hmisc")
library(Hmisc)
?cut2
library(HMISC)
library(Hmisc)
install.packages("Hmisc")
install.packages("Hmisc")
install.packages("Hmisc")
head(training)
?cut2
cut2(training$Cement, g=3)
library(Hmisc)
libarry(ggplot2)
library(ggplot2)
library(Hmisc)
library(ggplot2)
install.packages(ggplot2)
install.packages("ggplot2")
library(ggplot2)
library(Hmisc)
library(caret)
library(AppliedPredictiveModeling)
data(concrete)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(training)
g <- ggplot(x = row.names(training), y = training$CompressiveStrength)
g + geom_point()
g + geom_point()
g <- ggplot(trainig, aes(x = row.names(training), y = CompressiveStrength)
)
g <- ggplot(training, aes(x = row.names(training), y = CompressiveStrength))
g + geom_point()
cut2(training$Cement, g=3)
g <- ggplot(training, aes(x = row.names(training), y = CompressiveStrength, col = cut2(Cement, g =3)))
g + geom_point()
ggplot(training, aes(x = row.names(training), y = CompressiveStrength, col = cut2(Cement, g =3))) + geom_point()
head(training)
ggplot(training, aes(x = row.names(training), y = CompressiveStrength, col = cut2(BlastFurnaceSlag, g =3))) + geom_point()
ggplot(training, aes(x = row.names(training), y = CompressiveStrength, col = cut2(FlyAsh, g =3))) + geom_point()
ggplot(training, aes(x = row.names(training), y = CompressiveStrength, col = cut2(Age, g =3))) + geom_point()
ggplot(training, aes(x = row.names(training), y = CompressiveStrength, col = cut2(Water, g =3))) + geom_point()
ggplot(training, aes(x = row.names(training), y = CompressiveStrength, col = cut2(CoarseAggregate, g =3))) + geom_point()
ggplot(training, aes(x = row.names(training), y = CompressiveStrength, col = cut2(FineAggregate, g =3))) + geom_point()
ggplot(training, aes(x = row.names(training), y = CompressiveStrength, col = cut2(Superplasticizer, g =3))) + geom_point()
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
ggplot(training, aes(x=Superplasticizer)) + geom_hist()
ggplot(training, aes(x=Superplasticizer)) + geom_histogram()
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
preProc <- preProcess(training[,grep('^IL',names(training))],method="pca",thres=.9)
preProc
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
head(segmentationOriginal)
training <- subset(segmentationOriginal, Case = "train")
head(training)
training <- subset(segmentationOriginal, segmentationOriginal$Case = "Train")
training <- subset(segmentationOriginal, Case == "Train")
head(training)
testing <- subset(segmentationOriginal, Case == "Test")
dim(training)
dim(testing)
set.seed(125)
model <- rpart(Class ~ ., data=training,method="class")
library(rpart)
model <- rpart(Class ~ ., data=training,method="class")
print(model)
model<-train(Class ~ .,
data = training,
method = "rpart")
model<-train(Class ~ .,data = training,method = "rpart")
install.packages('caret', dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
dim(training)
model<-train(Class ~ .,data = training,method = "rpart")
library(caret)
model<-train(Class ~ .,data = training,method = "rpart")
print(model)
library(rattle)
install.packages(rattle)
install.packages("rattle")
fanceRpartPlot(model)
fancyRpartPlot(model)
library(rattle)
fancyRpartPlot(model)
library(rattle)
fancyRpartPlot(model)
dim(training)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
training <- subset(segmentationOriginal, Case = "Train")
dim(training)
training <- subset(segmentationOriginal, Case = "train")
dim(training)
training <- subset(segmentationOriginal, Case == "train")
dim(training)
training <- subset(segmentationOriginal, Case == "Train")
dim(training)
model <- train(Class ~ .,data=training, method="rpart")
library(rattle)
fancyRpartPlot(model)
plot(model$finalModel, uniform = TRUE)
text(model$finalModel,use.n=TRUE,all=TRUE,cex=8.)
plot(model$finalModel, uniform = TRUE)
text(model$finalModel,use.n=TRUE,all=TRUE,cex=.8)
library(pgmm)
install.packages("pgmm")
data(olive)
olive = olive[,-1]
library(pgmm)
data(olive)
olive = olive[,-1]
head(olive)
dim(olive)
?tree
newdata = as.data.frame(t(colMeans(olive)))
head(newdata)
model <- train(Area ~ ., method="tree",data=olive)
install.packages("tree")
library(tree)
model <- train(Area ~ ., method="tree",data=olive)
model <- train(Area ~ ., method="rpart",data=olive)
predict(mode, newdata)
predict(model, newdata)
head(olive)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
head(trainSA)
train <- trainSA[, !(colnames(trainSA) %in% c("sbp","adiposity","famhist"))]
head(train)
model <- train(chd ~ ., data=train, family="binominal", method="glm")
model <- train(chd ~ ., data=train, family="binomial", method="glm")
missClass <- function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(train$chd, predict(model, train))
missClass(testSA$chd, predict(model, testSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
train(y ~ ., data=vowel.train,method="rf",prox=TRUE)
install.packages("AppliedPredictiveModeling")
install.packages("caret")
install.packages("pgmm")
install.packages("rpart")
install.packages("gbm")
install.packages("lubridate")
install.packages("forecast")
install.packages("e1071")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
m1 <- train(y~., data=vowel.train,method="rf",prox=TRUE)
library(caret)
m1 <- train(y~., data=vowel.train,method="rf",prox=TRUE)
m2 <- train(y~., data=vowel.train,method="gbm",verbose=FALSE)
predict(m1, newdata = vowel.test)
head(vowel.test)
predm1 <- predict(m1, newdata = vowel.test)
predm2 <- predict(m2, newdata = vowel.test)
confusionmatrix(vowel.test$y,predm1)
confusionMatrix(vowel.test$y,predm1)
confusionMatrix(vowel.test$y,predm2)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.set(62433)
set.seed(62433)
rf <- train(diagnosis ~ ., data=training, method="rf")
gbm <- train(diagnosis ~ .,data=training,method="gbm")
lda <- train(diagnosis ~ .,data=training,method="lda")
lda
predrf <- predict(rf, newdata = testing)
predgbm <- predict(gbm, newdata = testing)
predlda <- predict(lda, newdata = testing)
head(predrf)
new <- array(testing$diagnosis,predrf,predgbm,predlda)
predlda
new <- matrix(training$diagnosis, predrf)
new <- matrix(training$diagnosis)
new <- cbind(training$diagnosis,predrf,predgbm,predlda)
head(new)
rf2 <- train(diagnosis ~ ., data=new, method="rf")
rf2 <- train(V1 ~ ., data=new, method="rf")
dim(new)
tail(new)
colnames(new) <- c("Diagnosis", "P1", "P2", "P3")
head(new)
rf2 <- train(Diagnosis ~ ., data=new, method="rf")
p <- predict(rf2, newdata = testing)
p <- predict(rf2, newdata = new)
confusionMatrix(new$Diagnosis, p)
head(new)
confusionMatrix(new$Diagnosis, p)
p <- predict(rf2, newdata = new)
confusionMatrix(predrf, testing$diagnosis)$overall[1]
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
head(training)
m <- train(CompressiveStrength ~ ., data=training, method="lasso")
?plot.enet
plot.enet(m, xvar=penalty,use.color=TRUE)
plot.enet(m, xvar="penalty",use.color=TRUE)
m
plot.enet(m$finalModel, xvar="penalty",use.color=TRUE)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testin
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
model <- train(CompressiveStrength ~ ., data=training, method="svm")
model <- svm(CompressiveStrength ~ ., data=training)
library(e1071)
model <- svm(CompressiveStrength ~ ., data=training)
pred <- predict(model, newdata=testing)
print(model)
accuracy(model, testing$CompressiveStrength)
?accuracy
library(forecast)
accuracy(pred, testing$CompressiveStrength)
install.packages("leaflet")
library(leaflet)
leaflet() %>% addTiles()
leaflet() %>% addTiles() %>% addMarkers(lat=39,long=-76,popup='test')
leaflet() %>% addTiles() %>% addMarkers(lat=39,lng=-76,popup='test')
m <- leaflet() %>% addTiles() %>% addMarkers(lat=39,lng=-76,popup='test')
m <- leaflet() %>% addTiles() %>% addMarkers(lat=39.2980,lng=-76.5989,popup='test')
df <- data.frame(lat = runif(20,min=39, max=40),lng=runif(20,min=-76,max=-77))
df <- data.frame(lat = runif(20,min=39, max=40),lng=runif(20,min=-76,max=-77))
df
df <- data.frame(lat = runif(20,min=39, max=40),lng=runif(20,min=-76,max=-75))
m <- df %>% leaflet() %>% addTiles() %>% addMarkers()
m
setwd("C:/Users/Markus/Developing_Data_Products/Markus/Assignment1")
read.table("input.txt")
input <- read.table("input.txt", header = TRUE)
input
ll <- input[,3:4]
ll
map <- ll %>% leaflet() %>% addTiles() %>% addMarkers()
map
map <- ll %>% leaflet() %>% addTiles() %>% addMarkers(popup = input[,1])
map
icons <- c("https://www.google.nl/url?sa=i&rct=j&q=&esrc=s&source=images&cd=&cad=rja&uact=8&ved=0ahUKEwiUv66_0LDSAhXBVhoKHVA4BVgQjRwIBw&url=https%3A%2F%2Fcommons.wikimedia.org%2Fwiki%2FFile%3ASV-Werder-Bremen-Logo.svg&psig=AFQjCNE_rGFrGGEWUAGRxyzPQU6OEz1H7w&ust=1488296993766447", "https://www.google.nl/url?sa=i&rct=j&q=&esrc=s&source=images&cd=&cad=rja&uact=8&ved=0ahUKEwiHxY_S0LDSAhVMiRoKHXO4DmQQjRwIBw&url=https%3A%2F%2Fcommons.wikimedia.org%2Fwiki%2FFile%3ABorussia_Dortmund_logo.svg&psig=AFQjCNG98M2KuR8aM2JSlaeypG_a_PGxmA&ust=1488297033724885")
myicon <- makeIcon(iconUrl = https://www.google.nl/url?sa=i&rct=j&q=&esrc=s&source=images&cd=&cad=rja&uact=8&ved=0ahUKEwiHxY_S0LDSAhVMiRoKHXO4DmQQjRwIBw&url=https%3A%2F%2Fcommons.wikimedia.org%2Fwiki%2FFile%3ABorussia_Dortmund_logo.svg&psig=AFQjCNG98M2KuR8aM2JSlaeypG_a_PGxmA&ust=1488297033724885)
myicon <- makeIcon(iconUrl = "https://www.google.nl/url?sa=i&rct=j&q=&esrc=s&source=images&cd=&cad=rja&uact=8&ved=0ahUKEwiHxY_S0LDSAhVMiRoKHXO4DmQQjRwIBw&url=https%3A%2F%2Fcommons.wikimedia.org%2Fwiki%2FFile%3ABorussia_Dortmund_logo.svg&psig=AFQjCNG98M2KuR8aM2JSlaeypG_a_PGxmA&ust=1488297033724885")
map <- ll %>% leaflet() %>% addTiles() %>% addMarkers(popup = input[,1],icons = myicon)
map <- ll %>% leaflet() %>% addTiles() %>% addMarkers(popup = input[,1],icon = myicon)
map
map <- ll %>% leaflet() %>% addTiles() %>% addMarkers(popup = input[,1])
map
capitals <- read.csv("country-capitals.csv")
head(capitals)
ll <- capitals[,3:4]
head(ll)
map %>% leaflet() %>% addTiles() %>% addMarkers()
map <- ll %>% leaflet() %>% addTiles() %>% addMarkers()
colnames(ll) <- c("lat","lng")
map <- ll %>% leaflet() %>% addTiles() %>% addMarkers()
head(ll)
str(ll)
ll$lat <- as.numeric(ll$lat)
map <- ll %>% leaflet() %>% addTiles() %>% addMarkers()
map
colnames(ll) <- c("lng","lat")
map <- ll %>% leaflet() %>% addTiles() %>% addMarkers()
map
capitals <- read.csv("country-capitals.csv")
str(capitals)
capitals$CapitalLatitude <- as.numeric(capitals$CaptialLatitude)
capitals <- read.csv("country-capitals.csv")
str(capitals)
library(dplyr)
capitals <- mutate(capitals,name = paste(CountryName, CapitalName, sep = " "))
head(capitals)
capitals <- read.csv("country-capitals.csv")
capitals <- mutate(capitals,name = paste(CountryName, CapitalName, sep = " ")) %>% select(CapitalLatitude, CapitalLongitude, name)
head(capitals)
capitals <- read.csv("country-capitals.csv")
capitals <- mutate(capitals,name = paste(CountryName, CapitalName, sep = " ")) %>% select(CapitalLatitude, CapitalLongitude, ContinentName, name)
head(capitals)
colnames(capitals) <- c("lat","lng","continent","label")
head(capitals)
map <- capitals %>% leaflet() %>% addTiles() %>% addMarkers()
map
map <- capitals %>% leaflet() %>% addTiles() %>% addMarkers(popup = label)
map <- capitals %>% leaflet() %>% addTiles() %>% addMarkers(popup = capitals$label)
map
map <- capitals %>% leaflet() %>% addTiles() %>% addMarkers(popup = capitals$label,colors = capitals$continent)
map <- capitals %>% leaflet() %>% addTiles() %>% addCircleMarkers(popup = capitals$label,colors = capitals$continent)
map <- capitals %>% leaflet() %>% addTiles() %>% addCircleMarkers(popup = capitals$label,color = capitals$continent)
map
str(capitals$continent)
capitals$continent
setwd("C:/Users/Markus/Developing_Data_Products/Markus/Assignment1")
capitals <- read.csv("country-capitals.csv")
capitals <- mutate(capitals,name = paste(CountryName, CapitalName, sep = " ")) %>% select(CapitalLatitude, CapitalLongitude, ContinentName, name)
colnames(capitals) <- c("lat","lng","continent","label")
library(dplyr)
library(leaflet)
capitals <- read.csv("country-capitals.csv")
capitals <- mutate(capitals,name = paste(CountryName, CapitalName, sep = " ")) %>% select(CapitalLatitude, CapitalLongitude, ContinentName, name)
colnames(capitals) <- c("lat","lng","continent","label")
head(capitals)
library(RColorBrewer)
(jColors <-
with(capitals,
data.frame(continent = levels(continent),
color = I(brewer.pal(nlevels(continent), name = 'Dark2')))
)
)
jColors
capitals$color <- match(capitals$continent,jColors$continent)
head(capitals)
capitals$color <- match(capitals$continent,jColors$continent)
map <- capitals %>% leaflet() %>% addTiles() %>% addCircleMarkers(popup = capitals$label, colours = capitals$color)
jColors$color <- c("Brown", "White", "Green", "Purple", "Yellow", "Blue", "Red", "Yellow")
jColors
capitals$color <- match(capitals$continent,jColors$continent)
head(capitals)
factpal <- colorFactor(topo.colors(8), capitals$continent)
factpal
map <- capitals %>% leaflet() %>% addTiles() %>% addCircleMarkers(popup = capitals$label, color=~factpal(continent))
map
map <- capitals %>% leaflet() %>% addTiles() %>% addCircleMarkers(popup = capitals$label, color=~factpal(continent)) %>% addLegend(capitals$continent,factpal)
map <- capitals %>% leaflet() %>% addTiles() %>% addCircleMarkers(popup = capitals$label, color=~factpal(continent)) %>% addLegend("bottomright",pal=factpal,values=capitals$continent)
map
map <- capitals %>% leaflet() %>% addTiles() %>% addCircleMarkers(popup = capitals$label, color=~factpal(continent)) %>% addLegend("bottomright",pal=factpal,values=capitals$continent, title="World Capitals")
map <- capitals %>% leaflet() %>% addTiles() %>% addCircleMarkers(popup = capitals$label, color=~factpal(continent)) %>% addLegend("bottomright",pal=factpal,values=capitals$continent, title="World Capitals")
map
map <- capitals %>% leaflet() %>% addTiles() %>% addMarkers(popup = capitals$label, color=~factpal(continent)) %>% addLegend("bottomright",pal=factpal,values=capitals$continent, title="World Capitals")
?addCircleMarkers
map <- capitals %>% leaflet() %>% addTiles() %>% addCircleMarkers(popup = capitals$label, color=~factpal(continent), size=1) %>% addLegend("bottomright",pal=factpal,values=capitals$continent, title="World Capitals")
map <- capitals %>% leaflet() %>% addTiles() %>% addCircleMarkers(popup = capitals$label, color=~factpal(continent), radius=1) %>% addLegend("bottomright",pal=factpal,values=capitals$continent, title="World Capitals")
map
capitals <- read.csv("country-capitals.csv")
capitals <- mutate(capitals,name = paste(CountryName, CapitalName, sep = " ")) %>% select(CapitalLatitude, CapitalLongitude, ContinentName, name)
colnames(capitals) <- c("lat","lng","continent","label")
factpal <- colorFactor(topo.colors(8), capitals$continent)
map <- capitals %>% leaflet() %>% addTiles() %>% addCircleMarkers(popup = capitals$label, color=~factpal(continent),radius=1) %>% addLegend("bottomright",pal=factpal,values=capitals$continent, title="World Capitals")
map
capitals <- read.csv("country-capitals.csv")
capitals <- mutate(capitals,name = paste(CountryName, CapitalName, sep = " ")) %>% select(CapitalLatitude, CapitalLongitude, ContinentName, name)
colnames(capitals) <- c("lat","lng","continent","label")
factpal <- colorFactor(topo.colors(8), capitals$continent)
map <- capitals %>% leaflet() %>% addTiles() %>% addCircleMarkers(popup = capitals$label, color=~factpal(continent),radius=1) %>% addLegend("bottomright",pal=factpal,values=capitals$continent, title="World Capitals")
map
?colorFactor
factpal <- colorFactor("Greens", capitals$continent)
map <- capitals %>% leaflet() %>% addTiles() %>% addCircleMarkers(popup = capitals$label, color=~factpal(continent),radius=1) %>% addLegend("bottomright",pal=factpal,values=capitals$continent, title="World Capitals")
map
factpal <- colorFactor("BuPu", capitals$continent)
map <- capitals %>% leaflet() %>% addTiles() %>% addCircleMarkers(popup = capitals$label, color=~factpal(continent),radius=1) %>% addLegend("bottomright",pal=factpal,values=capitals$continent, title="World Capitals")
map
factpal <- colorFactor("Paired", capitals$continent)
map <- capitals %>% leaflet() %>% addTiles() %>% addCircleMarkers(popup = capitals$label, color=~factpal(continent),radius=1) %>% addLegend("bottomright",pal=factpal,values=capitals$continent, title="World Capitals")
map
capitals <- read.csv("country-capitals.csv")
capitals <- mutate(capitals,name = paste(CountryName, CapitalName, sep = " ")) %>% select(CapitalLatitude, CapitalLongitude, ContinentName, name)
colnames(capitals) <- c("lat","lng","continent","label")
factpal <- colorFactor("paired", capitals$continent)
map <- capitals %>% leaflet() %>% addTiles() %>% addCircleMarkers(popup = capitals$label, color=~factpal(continent),radius=1) %>% addLegend("bottomright",pal=factpal,values=capitals$continent, title="World Capitals")
capitals <- read.csv("country-capitals.csv")
capitals <- mutate(capitals,name = paste(CountryName, CapitalName, sep = " ")) %>% select(CapitalLatitude, CapitalLongitude, ContinentName, name)
colnames(capitals) <- c("lat","lng","continent","label")
factpal <- colorFactor("Paired", capitals$continent)
map <- capitals %>% leaflet() %>% addTiles() %>% addCircleMarkers(popup = capitals$label, color=~factpal(continent),radius=1) %>% addLegend("bottomright",pal=factpal,values=capitals$continent, title="World Capitals")
map
addTiles
map <- capitals %>% leaflet() %>% addTiles() %>% addCircleMarkers(popup = capitals$label, color=~factpal(continent),radius=1,lat=~lat,lng=~lng) %>% addLegend("bottomright",pal=factpal,values=capitals$continent, title="World Capitals")
map
